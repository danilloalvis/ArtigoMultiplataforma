using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net.Http;
using Newtonsoft.Json;
using Xamarin.Forms;


namespace MyTask
{

    public delegate void Del(bool enable);

    public partial class MyTaskPage : MasterDetailPage
    {
        public List<MasterPageItem> menuList { get; set; }
        Del handler;


        public MyTaskPage()
        {
            InitializeComponent();
            menuList = new List<MasterPageItem>();


            var page1 = new MasterPageItem() { Title = "Tarefas", TargetType = typeof(Tasks) };
            var page2 = new MasterPageItem() { Title = "Criar Nova Terefa", TargetType = typeof(CreateNewTask) };
            var page4 = new MasterPageItem() { Title = "Sincronizar", TargetType = typeof(Nullable) };
            handler = enableGesture;

            menuList.Add(page1);
            menuList.Add(page2);
            menuList.Add(page4);


            navigationDrawerList.ItemsSource = menuList;
            navigationDrawerList.SelectedItem = page1;

            this.Master.Padding = new Thickness(0, Device.OnPlatform(20, 0, 0), 0, 0);



        }

        private void enableGesture(bool enable)
        {
            IsGestureEnabled = enable;
        }


        private void OnMenuItemSelected(object sender, SelectedItemChangedEventArgs e)
        {
            try
            {
                var item = (MasterPageItem)e.SelectedItem;

                if (!item.Title.Equals("Sincronizar"))
                {
                    Type page = item.TargetType;

                    Detail = new NavigationPage((Page)Activator.CreateInstance(page, handler));
                    IsPresented = false;
                }
                else
                {
                    GetPlacesAsync();
                    IsPresented = false;

                }
            }
            catch
            {
            }
        }
        public async void GetPlacesAsync()
        {
            var client = new HttpClient();
            var response = await client.GetAsync("https://arvantech.com/torquato_api/api.php");
            var placesJson = response.Content.ReadAsStringAsync().Result;

            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
               
                Debug.WriteLine(placesJson);
                if (placesJson != null && !placesJson.Equals(""))
                {
                    App.Current.Properties["list"] = placesJson;
                    DisplayAlert("Sucesso!", "Tarefas atualizado com sucesso", "OK");
                }
            }
            else {
                Debug.WriteLine(placesJson);
                DisplayAlert("Falha!", "Falha ao tentar atualizar tarefas", "OK");
            }
        }

    }
}
